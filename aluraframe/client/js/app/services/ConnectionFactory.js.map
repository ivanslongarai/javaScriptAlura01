{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","db","connection","close","ConnectionFactory","Errror","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","Error","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,cAAD,C;AACTC,mB,GAAU,C;AACVC,c,GAAK,Y;AACPC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCACCC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,MAAJ,CAAW,6DAAX,CAAN;AACH;;;;oDACsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAMC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,EAAtB,EAA0BD,OAA1B,CAApB;AACAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;AAGAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIiB,KAAJ,CAAU,gEAAV,CAAN;AACH,qCAFD;AAGH;AACDb,wCAAQL,UAAR;AACH,6BATD;AAUAO,wCAAYY,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYR,EAAEC,MAAF,CAASQ,KAArB;AACAhB,uCAAOO,EAAEC,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAnBM,CAAP;AAoBH;;;kDACoBvB,U,EAAY;AAC7BH,+BAAO2B,OAAP,CAAe,iBAAS;AACpB,gCAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI3B,WAAW4B,iBAAX,CAA6BD,KAA7B;AACJ3B,uCAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH;;;sDACwB;AACrB9B,mCAAWC,KAAX,GAAmBA,KAAnB;AACA,4BAAID,UAAJ,EACIC;AACJD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negotiations\"];\r\nconst version = 5;\r\nconst db = \"aluraframe\";\r\nlet connection = null;\r\nlet close = null;\r\nexport class ConnectionFactory {\r\n    constructor() {\r\n        throw new Errror(\"It's not possible to create instances of ConnectionFactory.\");\r\n    }\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            const openRequest = window.indexedDB.open(db, version);\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n            };\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error(\"It's not possible to close the connection by using this method\");\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            };\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        })\r\n    }\r\n    static closeConnection() {\r\n        connection.close = close;\r\n        if (connection)\r\n            close();\r\n        connection = null;\r\n    }\r\n}\r\n"]}